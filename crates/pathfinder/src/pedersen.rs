use crate::pedersen::field::{
    FieldElement, FieldElementRepr, PEDERSEN_P0, PEDERSEN_P1, PEDERSEN_P2, PEDERSEN_P3, PEDERSEN_P4,
};

use ff::PrimeField;

mod field;
/// The main hash code used by Starknet.
///
/// Contains 251 bits of data and is generated by the [pedersen_hash] function.
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct StarkHash([u8; 32]);

/// Error returned by [StarkHash::from_be_bytes] indicating that
/// more than the allowed 251 bits were set.
#[derive(Debug, PartialEq, Clone, Copy)]
pub struct OverflowError;

impl StarkHash {
    /// Returns the big-endian representation of this [StarkHash].
    pub fn to_be_bytes(self) -> [u8; 32] {
        self.0
    }

    /// Creates a [StarkHash] from big-endian bytes.
    ///
    /// Returns [OverflowError] if more than 251 bits are set.
    pub fn from_be_bytes(bytes: [u8; 32]) -> Result<Self, OverflowError> {
        match bytes[0] {
            0..=0b0000_0111 => Ok(Self(bytes)),
            _ => Err(OverflowError),
        }
    }
}

/// Computes the [Starknet Pedersen hash] on `a` and `b`.
///
/// [Starknet Pedersen hash]: https://docs.starkware.co/starkex-v3/crypto/pedersen-hash-function
pub fn pedersen_hash(a: StarkHash, b: StarkHash) -> StarkHash {
    let mut result = PEDERSEN_P0.clone();
    let a = FieldElement::from(a).into_bits();
    let b = FieldElement::from(b).into_bits();

    // Add a_low * P1
    let tmp = PEDERSEN_P1.multiply(&a[..248]);
    result = result.add(&tmp);

    // Add a_high * P2
    let tmp = PEDERSEN_P2.multiply(&a[248..252]);
    result = result.add(&tmp);

    // Add b_low * P3
    let tmp = PEDERSEN_P3.multiply(&b[..248]);
    result = result.add(&tmp);

    // Add b_high * P4
    let tmp = PEDERSEN_P4.multiply(&b[248..252]);
    result = result.add(&tmp);

    // Return x-coordinate
    StarkHash::from(result.x)
}

impl From<StarkHash> for FieldElement {
    fn from(hash: StarkHash) -> Self {
        debug_assert_eq!(
            std::mem::size_of::<FieldElement>(),
            std::mem::size_of::<StarkHash>()
        );
        Self::from_repr(FieldElementRepr(hash.to_be_bytes())).unwrap()
    }
}

impl From<FieldElement> for StarkHash {
    fn from(fp: FieldElement) -> Self {
        debug_assert_eq!(
            std::mem::size_of::<FieldElement>(),
            std::mem::size_of::<StarkHash>()
        );
        // unwrap is safe because the FieldElement and StarkHash
        // should both be 251 bits only.
        StarkHash::from_be_bytes(fp.to_repr().0).unwrap()
    }
}
#[cfg(test)]
mod tests {
    use super::*;
    use pretty_assertions::assert_eq;

    #[test]
    fn hash() {
        // Test vectors from https://github.com/starkware-libs/crypto-cpp/blob/master/src/starkware/crypto/pedersen_hash_test.cc
        let a = "03d937c035c878245caf64531a5756109c53068da139362728feb561405371cb";
        let b = "0208a0a10250e382e1e4bbe2880906c2791bf6275695e02fbbc6aeff9cd8b31a";
        let expected = "030e480bed5fe53fa909cc0f8c4d99b8f9f2c016be4c41e13a4848797979c662";

        fn parse_hex(str: &str) -> [u8; 32] {
            let mut buf = [0; 32];
            hex::decode_to_slice(str, &mut buf).unwrap();
            buf
        }

        let a = StarkHash::from_be_bytes(parse_hex(a)).unwrap();
        let b = StarkHash::from_be_bytes(parse_hex(b)).unwrap();
        let expected = StarkHash::from_be_bytes(parse_hex(expected)).unwrap();

        let hash = pedersen_hash(a, b);

        assert_eq!(hash, expected);
    }

    #[test]
    fn bytes_round_trip() {
        let original = [
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D,
            0x0E, 0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B,
            0x1C, 0x1D, 0x1E, 0x1F,
        ];
        let hash = StarkHash::from_be_bytes(original).unwrap();
        let bytes = hash.to_be_bytes();
        assert_eq!(bytes, original);
    }

    #[test]
    fn from_bytes_overflow() {
        // Set the 252nd bit (which is invalid).
        let mut bytes = [0; 32];
        bytes[0] = 0b0000_1000;
        assert_eq!(StarkHash::from_be_bytes(bytes), Err(OverflowError));
    }

    #[test]
    fn hash_field_round_trip() {
        let bytes = [
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D,
            0x0E, 0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B,
            0x1C, 0x1D, 0x1E, 0x1F,
        ];
        let original = StarkHash::from_be_bytes(bytes).unwrap();
        let fp = FieldElement::from(original);
        let hash = StarkHash::from(fp);
        assert_eq!(hash, original);
    }
}
